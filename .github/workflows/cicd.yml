name: test-build-deploy

on:
  push:
    branch: "main"
  pull_request:
    branch: "main"

jobs:
  terraformS3:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd s3
          terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd s3
          terraform plan

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd s3
          terraform apply -auto-approve

  terraformEC2:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    outputs:
      public_ip: ${{steps.ip_address.outputs.ip}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd ec2
          terraform init

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd ec2
          terraform plan

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd ec2
          terraform apply -auto-approve    

      - name: Export IP Address to environment variable
        id: ip_address
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          cd ec2  
          echo ip=$(terraform output instance_public_ip | sed 's/^.//;s/.$//') >> $GITHUB_OUTPUT
    

    #      - name: Copy jar file to ec2 instance
    #        id :
    #        env:
    #          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #        run: |
    #          cd terraform
    #          cd ec2
    #          eval `ssh-agent`
    #          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    #          x=$(terraform output instance_public_ip | sed 's/^.//;s/.$//')
    #          echo $x
    #          ssh -o StrictHostKeyChecking=no ec2-user@$x



    #  test:
    #    runs-on: ubuntu-latest
    #    steps:
    #      - name: Checkout
    #        uses: actions/checkout@v3
    #      - name: Setup java
    #        uses: actions/setup-java@v3
    #        with:
    #          distribution: corretto
    #          java-version: 17
    #      - name: Test
    #        run: ./gradlew test


#  build:
#    needs: "terraformEC2"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Setup java
#        uses: actions/setup-java@v3
#        with:
#          distribution: corretto
#          java-version: 17
#      - name: Build
#        run: ./gradlew build
#      - name: Copy jar file to artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: esop-trading-1.0
#          path: build/libs/esop-0.1-all.jar


  deploy:
    needs: ["terraformEC2"]
    runs-on: ubuntu-latest
    steps:
#      - name: Setup java
#        uses: actions/setup-java@v3
#        with:
#          distribution: corretto
#          java-version: 17
#      - name: Download jar file
#        uses: actions/download-artifact@v3
#        with:
#          name: esop-trading-1.0

       - name: Checkout
         uses: actions/checkout@v3

       - name: Copy jar file to ec2 instance
         env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{needs.terraformEC2.outputs.public_ip}}

         run: |
          eval `ssh-agent`
          echo  "$SSH_HOST"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          ssh -T -o StrictHostKeyChecking=no ec2-user@$SSH_HOST -t "sudo yum install java-17-amazon-corretto -y"
          ssh -T -o StrictHostKeyChecking=no ec2-user@$SSH_HOST -t "java -jar esop-0.1-all.jar "
          
            







